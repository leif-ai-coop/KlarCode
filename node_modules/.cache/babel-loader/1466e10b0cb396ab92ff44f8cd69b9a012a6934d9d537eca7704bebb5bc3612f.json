{"ast":null,"code":"/**\r\n * Parse ICD-10 codes from a codes file\r\n * @param {string} content - Content of the ICD-10 codes file\r\n * @returns {Object} - Map of ICD-10 codes\r\n */\nexport const parseICDCodes = content => {\n  const lines = content.split('\\n').filter(line => line.trim() !== '');\n  const codesMap = {};\n  lines.forEach(line => {\n    const parts = line.split(';');\n    if (parts.length >= 8) {\n      // Format: 3;N;X;01;A00;A00.-;A00;A00;Cholera;Cholera;;;V;V;1-002;2-001;3-003;4-002;001;9;9;9999;9999;9;J;J;J;J\n      // Or for subcodes: 4;T;X;01;A00;A00.0;A00.0;A000;Cholera durch Vibrio cholerae O:1, Biovar cholerae;Cholera;...\n      const kode = parts[6]; // A00.0 format\n      const originalNotation = parts[5]; // A00.- format für nicht-endstellige Codes\n      const beschreibung = parts[8];\n\n      // Markieren, ob es sich um einen nicht-endstelligen Code handelt\n      const isNonTerminal = originalNotation.includes('.-');\n      codesMap[kode] = {\n        kode,\n        beschreibung,\n        isNonTerminal\n      };\n    }\n  });\n  return codesMap;\n};\n\n/**\r\n * Parse ICD-10 groups from a group file\r\n * @param {string} content - Content of the ICD-10 groups file\r\n * @returns {Object} - Map of ICD-10 groups\r\n */\nexport const parseICDGroups = content => {\n  const lines = content.split('\\n').filter(line => line.trim() !== '');\n  const groupsMap = {};\n  lines.forEach(line => {\n    const parts = line.split(';');\n    if (parts.length >= 3) {\n      // Format: A00;A09;01;Infektiöse Darmkrankheiten\n      const startCode = parts[0];\n      const endCode = parts[1];\n      const description = parts[3];\n      groupsMap[`${startCode}-${endCode}`] = {\n        start: startCode,\n        end: endCode,\n        description\n      };\n    }\n  });\n  return groupsMap;\n};\n\n/**\r\n * Parse ICD-10 chapters from a chapter file\r\n * @param {string} content - Content of the ICD-10 chapters file\r\n * @returns {Object} - Map of ICD-10 chapters\r\n */\nexport const parseICDChapters = content => {\n  const lines = content.split('\\n').filter(line => line.trim() !== '');\n  const chaptersMap = {};\n  lines.forEach(line => {\n    const parts = line.split(';');\n    if (parts.length >= 2) {\n      // Format: 01;Bestimmte infektiöse und parasitäre Krankheiten\n      const id = parts[0];\n      const description = parts[1];\n      chaptersMap[id] = {\n        id,\n        description\n      };\n    }\n  });\n  return chaptersMap;\n};\n\n/**\r\n * Parse OPS codes from a codes file\r\n * @param {string} content - Content of the OPS codes file\r\n * @returns {Object} - Map of OPS codes\r\n */\nexport const parseOPSCodes = content => {\n  const lines = content.split('\\n').filter(line => line.trim() !== '');\n  const codesMap = {};\n  lines.forEach(line => {\n    const parts = line.split(';');\n    if (parts.length >= 7) {\n      const kode = parts[6]; // 1-100 format\n      const beschreibung = parts[8];\n\n      // Bei OPS Codes ist es schwieriger zu erkennen, ob es ein nicht-endstelliger Code ist\n      // Wir könnten hier eine Heuristik verwenden, aber für jetzt markieren wir Codes ohne Punkt als möglicherweise nicht-endstellig\n      const isNonTerminal = !kode.includes('.');\n      codesMap[kode] = {\n        kode,\n        beschreibung,\n        isNonTerminal\n      };\n    }\n  });\n  return codesMap;\n};\n\n/**\r\n * Parse OPS groups from a group file\r\n * @param {string} content - Content of the OPS groups file\r\n * @returns {Object} - Map of OPS groups\r\n */\nexport const parseOPSGroups = content => {\n  const lines = content.split('\\n').filter(line => line.trim() !== '');\n  const groupsMap = {};\n  lines.forEach(line => {\n    const parts = line.split(';');\n    if (parts.length >= 4) {\n      // Format: 1;1-10;1-10;Klinische Untersuchung\n      const groupCode = parts[2];\n      const description = parts[3];\n      groupsMap[groupCode] = {\n        code: groupCode,\n        description\n      };\n    }\n  });\n  return groupsMap;\n};\n\n/**\r\n * Parse OPS chapters from a chapter file\r\n * @param {string} content - Content of the OPS chapters file\r\n * @returns {Object} - Map of OPS chapters\r\n */\nexport const parseOPSChapters = content => {\n  const lines = content.split('\\n').filter(line => line.trim() !== '');\n  const chaptersMap = {};\n  lines.forEach(line => {\n    const parts = line.split(';');\n    if (parts.length >= 2) {\n      // Format: 1;DIAGNOSTISCHE MASSNAHMEN\n      const id = parts[0];\n      const description = parts[1];\n      chaptersMap[id] = {\n        id,\n        description\n      };\n    }\n  });\n  return chaptersMap;\n};\n\n/**\r\n * Parse OPS three-digit codes from a file\r\n * @param {string} content - Content of the OPS three-digit codes file\r\n * @returns {Object} - Map of OPS three-digit codes\r\n */\nexport const parseOPSDreisteller = content => {\n  const lines = content.split('\\n').filter(line => line.trim() !== '');\n  const dreistellerMap = {};\n  lines.forEach(line => {\n    const parts = line.split(';');\n    if (parts.length >= 4) {\n      // Format: 1;1-10;1-10;Klinische Untersuchung\n      const code = parts[2];\n      const description = parts[3];\n      dreistellerMap[code] = {\n        code,\n        description\n      };\n    }\n  });\n  return dreistellerMap;\n};","map":{"version":3,"names":["parseICDCodes","content","lines","split","filter","line","trim","codesMap","forEach","parts","length","kode","originalNotation","beschreibung","isNonTerminal","includes","parseICDGroups","groupsMap","startCode","endCode","description","start","end","parseICDChapters","chaptersMap","id","parseOPSCodes","parseOPSGroups","groupCode","code","parseOPSChapters","parseOPSDreisteller","dreistellerMap"],"sources":["C:/Code/KlarCode/src/utils/parser.js"],"sourcesContent":["/**\r\n * Parse ICD-10 codes from a codes file\r\n * @param {string} content - Content of the ICD-10 codes file\r\n * @returns {Object} - Map of ICD-10 codes\r\n */\r\nexport const parseICDCodes = (content) => {\r\n  const lines = content.split('\\n').filter(line => line.trim() !== '');\r\n  const codesMap = {};\r\n\r\n  lines.forEach(line => {\r\n    const parts = line.split(';');\r\n    if (parts.length >= 8) {\r\n      // Format: 3;N;X;01;A00;A00.-;A00;A00;Cholera;Cholera;;;V;V;1-002;2-001;3-003;4-002;001;9;9;9999;9999;9;J;J;J;J\r\n      // Or for subcodes: 4;T;X;01;A00;A00.0;A00.0;A000;Cholera durch Vibrio cholerae O:1, Biovar cholerae;Cholera;...\r\n      const kode = parts[6]; // A00.0 format\r\n      const originalNotation = parts[5]; // A00.- format für nicht-endstellige Codes\r\n      const beschreibung = parts[8];\r\n      \r\n      // Markieren, ob es sich um einen nicht-endstelligen Code handelt\r\n      const isNonTerminal = originalNotation.includes('.-');\r\n      \r\n      codesMap[kode] = {\r\n        kode,\r\n        beschreibung,\r\n        isNonTerminal\r\n      };\r\n    }\r\n  });\r\n\r\n  return codesMap;\r\n};\r\n\r\n/**\r\n * Parse ICD-10 groups from a group file\r\n * @param {string} content - Content of the ICD-10 groups file\r\n * @returns {Object} - Map of ICD-10 groups\r\n */\r\nexport const parseICDGroups = (content) => {\r\n  const lines = content.split('\\n').filter(line => line.trim() !== '');\r\n  const groupsMap = {};\r\n\r\n  lines.forEach(line => {\r\n    const parts = line.split(';');\r\n    if (parts.length >= 3) {\r\n      // Format: A00;A09;01;Infektiöse Darmkrankheiten\r\n      const startCode = parts[0];\r\n      const endCode = parts[1];\r\n      const description = parts[3];\r\n\r\n      groupsMap[`${startCode}-${endCode}`] = {\r\n        start: startCode,\r\n        end: endCode,\r\n        description\r\n      };\r\n    }\r\n  });\r\n\r\n  return groupsMap;\r\n};\r\n\r\n/**\r\n * Parse ICD-10 chapters from a chapter file\r\n * @param {string} content - Content of the ICD-10 chapters file\r\n * @returns {Object} - Map of ICD-10 chapters\r\n */\r\nexport const parseICDChapters = (content) => {\r\n  const lines = content.split('\\n').filter(line => line.trim() !== '');\r\n  const chaptersMap = {};\r\n\r\n  lines.forEach(line => {\r\n    const parts = line.split(';');\r\n    if (parts.length >= 2) {\r\n      // Format: 01;Bestimmte infektiöse und parasitäre Krankheiten\r\n      const id = parts[0];\r\n      const description = parts[1];\r\n\r\n      chaptersMap[id] = {\r\n        id,\r\n        description\r\n      };\r\n    }\r\n  });\r\n\r\n  return chaptersMap;\r\n};\r\n\r\n/**\r\n * Parse OPS codes from a codes file\r\n * @param {string} content - Content of the OPS codes file\r\n * @returns {Object} - Map of OPS codes\r\n */\r\nexport const parseOPSCodes = (content) => {\r\n  const lines = content.split('\\n').filter(line => line.trim() !== '');\r\n  const codesMap = {};\r\n\r\n  lines.forEach(line => {\r\n    const parts = line.split(';');\r\n    if (parts.length >= 7) {\r\n      const kode = parts[6]; // 1-100 format\r\n      const beschreibung = parts[8];\r\n      \r\n      // Bei OPS Codes ist es schwieriger zu erkennen, ob es ein nicht-endstelliger Code ist\r\n      // Wir könnten hier eine Heuristik verwenden, aber für jetzt markieren wir Codes ohne Punkt als möglicherweise nicht-endstellig\r\n      const isNonTerminal = !kode.includes('.');\r\n      \r\n      codesMap[kode] = {\r\n        kode,\r\n        beschreibung,\r\n        isNonTerminal\r\n      };\r\n    }\r\n  });\r\n\r\n  return codesMap;\r\n};\r\n\r\n/**\r\n * Parse OPS groups from a group file\r\n * @param {string} content - Content of the OPS groups file\r\n * @returns {Object} - Map of OPS groups\r\n */\r\nexport const parseOPSGroups = (content) => {\r\n  const lines = content.split('\\n').filter(line => line.trim() !== '');\r\n  const groupsMap = {};\r\n\r\n  lines.forEach(line => {\r\n    const parts = line.split(';');\r\n    if (parts.length >= 4) {\r\n      // Format: 1;1-10;1-10;Klinische Untersuchung\r\n      const groupCode = parts[2];\r\n      const description = parts[3];\r\n\r\n      groupsMap[groupCode] = {\r\n        code: groupCode,\r\n        description\r\n      };\r\n    }\r\n  });\r\n\r\n  return groupsMap;\r\n};\r\n\r\n/**\r\n * Parse OPS chapters from a chapter file\r\n * @param {string} content - Content of the OPS chapters file\r\n * @returns {Object} - Map of OPS chapters\r\n */\r\nexport const parseOPSChapters = (content) => {\r\n  const lines = content.split('\\n').filter(line => line.trim() !== '');\r\n  const chaptersMap = {};\r\n\r\n  lines.forEach(line => {\r\n    const parts = line.split(';');\r\n    if (parts.length >= 2) {\r\n      // Format: 1;DIAGNOSTISCHE MASSNAHMEN\r\n      const id = parts[0];\r\n      const description = parts[1];\r\n\r\n      chaptersMap[id] = {\r\n        id,\r\n        description\r\n      };\r\n    }\r\n  });\r\n\r\n  return chaptersMap;\r\n};\r\n\r\n/**\r\n * Parse OPS three-digit codes from a file\r\n * @param {string} content - Content of the OPS three-digit codes file\r\n * @returns {Object} - Map of OPS three-digit codes\r\n */\r\nexport const parseOPSDreisteller = (content) => {\r\n  const lines = content.split('\\n').filter(line => line.trim() !== '');\r\n  const dreistellerMap = {};\r\n\r\n  lines.forEach(line => {\r\n    const parts = line.split(';');\r\n    if (parts.length >= 4) {\r\n      // Format: 1;1-10;1-10;Klinische Untersuchung\r\n      const code = parts[2];\r\n      const description = parts[3];\r\n\r\n      dreistellerMap[code] = {\r\n        code,\r\n        description\r\n      };\r\n    }\r\n  });\r\n\r\n  return dreistellerMap;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}