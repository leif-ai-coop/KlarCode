{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useEffect } from 'react';\nimport { searchICDCodes, searchOPSCodes, getCurrentYear, loadICDData, loadOPSData } from '../services/dataService';\nimport { parseUserInput, analyzeCodeTypes } from '../utils/search';\n\n/**\r\n * Custom hook for medical code searching\r\n */\nconst useCodeSearch = () => {\n  _s();\n  const [searchInput, setSearchInput] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errors, setErrors] = useState([]);\n  const [duplicatesRemoved, setDuplicatesRemoved] = useState(0);\n  const [selectedYear, setSelectedYear] = useState(getCurrentYear());\n  const [showMore, setShowMore] = useState({\n    kapitel: false,\n    gruppe: false,\n    dreisteller: false\n  });\n\n  // Initialize data loading\n  useEffect(() => {\n    const initializeData = async () => {\n      try {\n        setIsLoading(true);\n        // Preload data for the current year\n        await Promise.all([loadICDData(selectedYear), loadOPSData(selectedYear)]);\n      } catch (error) {\n        console.error('Error initializing data:', error);\n        setErrors(prev => [...prev, `Fehler beim Laden der Daten: ${error.message}`]);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    initializeData();\n  }, [selectedYear]);\n\n  /**\r\n   * Handle search input change\r\n   * @param {string} value - New search input value\r\n   */\n  const handleInputChange = useCallback(value => {\n    setSearchInput(value);\n  }, []);\n\n  /**\r\n   * Perform the search with the current input\r\n   */\n  const handleSearch = useCallback(async () => {\n    if (!searchInput.trim()) {\n      return;\n    }\n    setIsLoading(true);\n    setErrors([]);\n    setSearchResults([]);\n    setDuplicatesRemoved(0);\n    try {\n      // Parse user input first\n      const {\n        codes,\n        duplicatesRemoved: dupRemoved\n      } = parseUserInput(searchInput);\n\n      // Analyze what types of codes we have\n      const analysis = analyzeCodeTypes(codes);\n      console.log(\"Code type analysis:\", analysis);\n\n      // If we have mixed code types, show an error\n      if (analysis.isMixed) {\n        setErrors([\"Bitte geben Sie entweder nur ICD-Codes oder nur OPS-Codes ein, nicht beides gleichzeitig.\"]);\n        setIsLoading(false);\n        return;\n      }\n\n      // If we have unknown codes, show a more specific error\n      if (analysis.unknownCodes.length > 0) {\n        setErrors([`Unbekanntes Code-Format: ${analysis.unknownCodes.join(', ')}`]);\n        setIsLoading(false);\n        return;\n      }\n      let results = [];\n      let errors = [];\n\n      // Execute only the relevant search based on detected type\n      if (analysis.type === 'icd') {\n        console.log(\"Detected ICD codes, performing ICD search only\");\n        const icdResults = await searchICDCodes(searchInput, selectedYear);\n        results = icdResults.results;\n        errors = icdResults.errors;\n        setDuplicatesRemoved(icdResults.duplicatesRemoved);\n      } else if (analysis.type === 'ops') {\n        console.log(\"Detected OPS codes, performing OPS search only\");\n        const opsResults = await searchOPSCodes(searchInput, selectedYear);\n        results = opsResults.results;\n        errors = opsResults.errors;\n        setDuplicatesRemoved(opsResults.duplicatesRemoved);\n      } else {\n        // Sollte nicht vorkommen, da wir vorher auf unbekannte Codes pr端fen\n        setErrors([\"Keine g端ltigen Codes in der Eingabe gefunden.\"]);\n        setIsLoading(false);\n        return;\n      }\n      setSearchResults(results);\n      setErrors(errors);\n    } catch (error) {\n      console.error('Error during search:', error);\n      setErrors([`Fehler bei der Suche: ${error.message}`]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [searchInput, selectedYear]);\n\n  /**\r\n   * Handle year change\r\n   * @param {string} year - New year value\r\n   */\n  const handleYearChange = useCallback(year => {\n    setSelectedYear(year);\n  }, []);\n\n  /**\r\n   * Toggle showing additional info columns\r\n   * @param {string} field - Field to toggle (kapitel, gruppe, dreisteller)\r\n   */\n  const toggleShowMore = useCallback(field => {\n    setShowMore(prev => ({\n      ...prev,\n      [field]: !prev[field]\n    }));\n  }, []);\n\n  /**\r\n   * Clear all search results and inputs\r\n   */\n  const handleClear = useCallback(() => {\n    setSearchInput('');\n    setSearchResults([]);\n    setErrors([]);\n    setDuplicatesRemoved(0);\n  }, []);\n  return {\n    searchInput,\n    searchResults,\n    isLoading,\n    errors,\n    duplicatesRemoved,\n    selectedYear,\n    showMore,\n    handleInputChange,\n    handleSearch,\n    handleYearChange,\n    toggleShowMore,\n    handleClear\n  };\n};\n_s(useCodeSearch, \"/oGgmnaCh6POJkmxv6C8MZtRAHk=\");\nexport default useCodeSearch;","map":{"version":3,"names":["useState","useCallback","useEffect","searchICDCodes","searchOPSCodes","getCurrentYear","loadICDData","loadOPSData","parseUserInput","analyzeCodeTypes","useCodeSearch","_s","searchInput","setSearchInput","searchResults","setSearchResults","isLoading","setIsLoading","errors","setErrors","duplicatesRemoved","setDuplicatesRemoved","selectedYear","setSelectedYear","showMore","setShowMore","kapitel","gruppe","dreisteller","initializeData","Promise","all","error","console","prev","message","handleInputChange","value","handleSearch","trim","codes","dupRemoved","analysis","log","isMixed","unknownCodes","length","join","results","type","icdResults","opsResults","handleYearChange","year","toggleShowMore","field","handleClear"],"sources":["C:/Code/KlarCode/src/hooks/useCodeSearch.js"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\r\nimport { searchICDCodes, searchOPSCodes, getCurrentYear, loadICDData, loadOPSData } from '../services/dataService';\r\nimport { parseUserInput, analyzeCodeTypes } from '../utils/search';\r\n\r\n/**\r\n * Custom hook for medical code searching\r\n */\r\nconst useCodeSearch = () => {\r\n  const [searchInput, setSearchInput] = useState('');\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [errors, setErrors] = useState([]);\r\n  const [duplicatesRemoved, setDuplicatesRemoved] = useState(0);\r\n  const [selectedYear, setSelectedYear] = useState(getCurrentYear());\r\n  const [showMore, setShowMore] = useState({\r\n    kapitel: false,\r\n    gruppe: false,\r\n    dreisteller: false\r\n  });\r\n  \r\n  // Initialize data loading\r\n  useEffect(() => {\r\n    const initializeData = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        // Preload data for the current year\r\n        await Promise.all([\r\n          loadICDData(selectedYear),\r\n          loadOPSData(selectedYear)\r\n        ]);\r\n      } catch (error) {\r\n        console.error('Error initializing data:', error);\r\n        setErrors(prev => [...prev, `Fehler beim Laden der Daten: ${error.message}`]);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    initializeData();\r\n  }, [selectedYear]);\r\n  \r\n  /**\r\n   * Handle search input change\r\n   * @param {string} value - New search input value\r\n   */\r\n  const handleInputChange = useCallback((value) => {\r\n    setSearchInput(value);\r\n  }, []);\r\n  \r\n  /**\r\n   * Perform the search with the current input\r\n   */\r\n  const handleSearch = useCallback(async () => {\r\n    if (!searchInput.trim()) {\r\n      return;\r\n    }\r\n    \r\n    setIsLoading(true);\r\n    setErrors([]);\r\n    setSearchResults([]);\r\n    setDuplicatesRemoved(0);\r\n    \r\n    try {\r\n      // Parse user input first\r\n      const { codes, duplicatesRemoved: dupRemoved } = parseUserInput(searchInput);\r\n      \r\n      // Analyze what types of codes we have\r\n      const analysis = analyzeCodeTypes(codes);\r\n      console.log(\"Code type analysis:\", analysis);\r\n      \r\n      // If we have mixed code types, show an error\r\n      if (analysis.isMixed) {\r\n        setErrors([\"Bitte geben Sie entweder nur ICD-Codes oder nur OPS-Codes ein, nicht beides gleichzeitig.\"]);\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n      \r\n      // If we have unknown codes, show a more specific error\r\n      if (analysis.unknownCodes.length > 0) {\r\n        setErrors([`Unbekanntes Code-Format: ${analysis.unknownCodes.join(', ')}`]);\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n      \r\n      let results = [];\r\n      let errors = [];\r\n      \r\n      // Execute only the relevant search based on detected type\r\n      if (analysis.type === 'icd') {\r\n        console.log(\"Detected ICD codes, performing ICD search only\");\r\n        const icdResults = await searchICDCodes(searchInput, selectedYear);\r\n        results = icdResults.results;\r\n        errors = icdResults.errors;\r\n        setDuplicatesRemoved(icdResults.duplicatesRemoved);\r\n      } else if (analysis.type === 'ops') {\r\n        console.log(\"Detected OPS codes, performing OPS search only\");\r\n        const opsResults = await searchOPSCodes(searchInput, selectedYear);\r\n        results = opsResults.results;\r\n        errors = opsResults.errors;\r\n        setDuplicatesRemoved(opsResults.duplicatesRemoved);\r\n      } else {\r\n        // Sollte nicht vorkommen, da wir vorher auf unbekannte Codes pr端fen\r\n        setErrors([\"Keine g端ltigen Codes in der Eingabe gefunden.\"]);\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n      \r\n      setSearchResults(results);\r\n      setErrors(errors);\r\n    } catch (error) {\r\n      console.error('Error during search:', error);\r\n      setErrors([`Fehler bei der Suche: ${error.message}`]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [searchInput, selectedYear]);\r\n  \r\n  /**\r\n   * Handle year change\r\n   * @param {string} year - New year value\r\n   */\r\n  const handleYearChange = useCallback((year) => {\r\n    setSelectedYear(year);\r\n  }, []);\r\n  \r\n  /**\r\n   * Toggle showing additional info columns\r\n   * @param {string} field - Field to toggle (kapitel, gruppe, dreisteller)\r\n   */\r\n  const toggleShowMore = useCallback((field) => {\r\n    setShowMore(prev => ({\r\n      ...prev,\r\n      [field]: !prev[field]\r\n    }));\r\n  }, []);\r\n  \r\n  /**\r\n   * Clear all search results and inputs\r\n   */\r\n  const handleClear = useCallback(() => {\r\n    setSearchInput('');\r\n    setSearchResults([]);\r\n    setErrors([]);\r\n    setDuplicatesRemoved(0);\r\n  }, []);\r\n  \r\n  return {\r\n    searchInput,\r\n    searchResults,\r\n    isLoading,\r\n    errors,\r\n    duplicatesRemoved,\r\n    selectedYear,\r\n    showMore,\r\n    handleInputChange,\r\n    handleSearch,\r\n    handleYearChange,\r\n    toggleShowMore,\r\n    handleClear,\r\n  };\r\n};\r\n\r\nexport default useCodeSearch; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}