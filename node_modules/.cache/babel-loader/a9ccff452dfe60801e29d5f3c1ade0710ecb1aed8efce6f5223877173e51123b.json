{"ast":null,"code":"/**\r\n * Convert an array of objects to CSV string\r\n * @param {Array} data - The data to convert\r\n * @param {Array} headers - The headers to include\r\n * @returns {string} - CSV string\r\n */\nexport const convertToCSV = (data, headers) => {\n  if (!data || !data.length) return '';\n\n  // Create header row\n  const headerRow = headers.map(h => `\"${h.label}\"`).join(',');\n\n  // Create data rows\n  const rows = data.map(item => {\n    return headers.map(header => {\n      const value = item[header.key] || '';\n      // Escape quotes and wrap values in quotes\n      return `\"${String(value).replace(/\"/g, '\"\"')}\"`;\n    }).join(',');\n  });\n\n  // Combine header and data rows\n  return [headerRow, ...rows].join('\\n');\n};\n\n/**\r\n * Export data as CSV file\r\n * @param {Array} data - The data to export\r\n * @param {Array} headers - The headers to include\r\n * @param {string} filename - The filename to use\r\n */\nexport const exportToCSV = (data, headers, filename = 'export.csv') => {\n  const csv = convertToCSV(data, headers);\n  downloadFile(csv, filename, 'text/csv;charset=utf-8;');\n};\n\n/**\r\n * Export data as Excel file\r\n * Note: This is a basic implementation using CSV with .xlsx extension\r\n * For a more robust solution, libraries like xlsx could be used\r\n * @param {Array} data - The data to export\r\n * @param {Array} headers - The headers to include\r\n * @param {string} filename - The filename to use\r\n */\nexport const exportToExcel = (data, headers, filename = 'export.xlsx') => {\n  // Convert to CSV as a simple approach\n  const csv = convertToCSV(data, headers);\n\n  // For Excel, use a BOM for UTF-8 encoding support\n  const csvWithBOM = '\\uFEFF' + csv;\n\n  // Use .xlsx extension but it's still CSV content\n  downloadFile(csvWithBOM, filename, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8');\n};\n\n/**\r\n * Helper function to download a file\r\n * @param {string} content - The file content\r\n * @param {string} filename - The filename\r\n * @param {string} contentType - The content type\r\n */\nconst downloadFile = (content, filename, contentType) => {\n  // Create a blob from the content\n  const blob = new Blob([content], {\n    type: contentType\n  });\n\n  // Create a URL for the blob\n  const url = URL.createObjectURL(blob);\n\n  // Create a temporary link element\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n\n  // Append to body, click, and remove\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n\n  // Clean up the URL\n  URL.revokeObjectURL(url);\n};","map":{"version":3,"names":["convertToCSV","data","headers","length","headerRow","map","h","label","join","rows","item","header","value","key","String","replace","exportToCSV","filename","csv","downloadFile","exportToExcel","csvWithBOM","content","contentType","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL"],"sources":["C:/Code/KlarCode/src/utils/export.js"],"sourcesContent":["/**\r\n * Convert an array of objects to CSV string\r\n * @param {Array} data - The data to convert\r\n * @param {Array} headers - The headers to include\r\n * @returns {string} - CSV string\r\n */\r\nexport const convertToCSV = (data, headers) => {\r\n  if (!data || !data.length) return '';\r\n  \r\n  // Create header row\r\n  const headerRow = headers.map(h => `\"${h.label}\"`).join(',');\r\n  \r\n  // Create data rows\r\n  const rows = data.map(item => {\r\n    return headers.map(header => {\r\n      const value = item[header.key] || '';\r\n      // Escape quotes and wrap values in quotes\r\n      return `\"${String(value).replace(/\"/g, '\"\"')}\"`;\r\n    }).join(',');\r\n  });\r\n  \r\n  // Combine header and data rows\r\n  return [headerRow, ...rows].join('\\n');\r\n};\r\n\r\n/**\r\n * Export data as CSV file\r\n * @param {Array} data - The data to export\r\n * @param {Array} headers - The headers to include\r\n * @param {string} filename - The filename to use\r\n */\r\nexport const exportToCSV = (data, headers, filename = 'export.csv') => {\r\n  const csv = convertToCSV(data, headers);\r\n  downloadFile(csv, filename, 'text/csv;charset=utf-8;');\r\n};\r\n\r\n/**\r\n * Export data as Excel file\r\n * Note: This is a basic implementation using CSV with .xlsx extension\r\n * For a more robust solution, libraries like xlsx could be used\r\n * @param {Array} data - The data to export\r\n * @param {Array} headers - The headers to include\r\n * @param {string} filename - The filename to use\r\n */\r\nexport const exportToExcel = (data, headers, filename = 'export.xlsx') => {\r\n  // Convert to CSV as a simple approach\r\n  const csv = convertToCSV(data, headers);\r\n  \r\n  // For Excel, use a BOM for UTF-8 encoding support\r\n  const csvWithBOM = '\\uFEFF' + csv;\r\n  \r\n  // Use .xlsx extension but it's still CSV content\r\n  downloadFile(csvWithBOM, filename, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8');\r\n};\r\n\r\n/**\r\n * Helper function to download a file\r\n * @param {string} content - The file content\r\n * @param {string} filename - The filename\r\n * @param {string} contentType - The content type\r\n */\r\nconst downloadFile = (content, filename, contentType) => {\r\n  // Create a blob from the content\r\n  const blob = new Blob([content], { type: contentType });\r\n  \r\n  // Create a URL for the blob\r\n  const url = URL.createObjectURL(blob);\r\n  \r\n  // Create a temporary link element\r\n  const link = document.createElement('a');\r\n  link.href = url;\r\n  link.download = filename;\r\n  \r\n  // Append to body, click, and remove\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n  \r\n  // Clean up the URL\r\n  URL.revokeObjectURL(url);\r\n}; "],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,YAAY,GAAGA,CAACC,IAAI,EAAEC,OAAO,KAAK;EAC7C,IAAI,CAACD,IAAI,IAAI,CAACA,IAAI,CAACE,MAAM,EAAE,OAAO,EAAE;;EAEpC;EACA,MAAMC,SAAS,GAAGF,OAAO,CAACG,GAAG,CAACC,CAAC,IAAI,IAAIA,CAAC,CAACC,KAAK,GAAG,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;;EAE5D;EACA,MAAMC,IAAI,GAAGR,IAAI,CAACI,GAAG,CAACK,IAAI,IAAI;IAC5B,OAAOR,OAAO,CAACG,GAAG,CAACM,MAAM,IAAI;MAC3B,MAAMC,KAAK,GAAGF,IAAI,CAACC,MAAM,CAACE,GAAG,CAAC,IAAI,EAAE;MACpC;MACA,OAAO,IAAIC,MAAM,CAACF,KAAK,CAAC,CAACG,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG;IACjD,CAAC,CAAC,CAACP,IAAI,CAAC,GAAG,CAAC;EACd,CAAC,CAAC;;EAEF;EACA,OAAO,CAACJ,SAAS,EAAE,GAAGK,IAAI,CAAC,CAACD,IAAI,CAAC,IAAI,CAAC;AACxC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMQ,WAAW,GAAGA,CAACf,IAAI,EAAEC,OAAO,EAAEe,QAAQ,GAAG,YAAY,KAAK;EACrE,MAAMC,GAAG,GAAGlB,YAAY,CAACC,IAAI,EAAEC,OAAO,CAAC;EACvCiB,YAAY,CAACD,GAAG,EAAED,QAAQ,EAAE,yBAAyB,CAAC;AACxD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,aAAa,GAAGA,CAACnB,IAAI,EAAEC,OAAO,EAAEe,QAAQ,GAAG,aAAa,KAAK;EACxE;EACA,MAAMC,GAAG,GAAGlB,YAAY,CAACC,IAAI,EAAEC,OAAO,CAAC;;EAEvC;EACA,MAAMmB,UAAU,GAAG,QAAQ,GAAGH,GAAG;;EAEjC;EACAC,YAAY,CAACE,UAAU,EAAEJ,QAAQ,EAAE,iFAAiF,CAAC;AACvH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,YAAY,GAAGA,CAACG,OAAO,EAAEL,QAAQ,EAAEM,WAAW,KAAK;EACvD;EACA,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACH,OAAO,CAAC,EAAE;IAAEI,IAAI,EAAEH;EAAY,CAAC,CAAC;;EAEvD;EACA,MAAMI,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACL,IAAI,CAAC;;EAErC;EACA,MAAMM,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;EACxCF,IAAI,CAACG,IAAI,GAAGN,GAAG;EACfG,IAAI,CAACI,QAAQ,GAAGjB,QAAQ;;EAExB;EACAc,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,IAAI,CAAC;EAC/BA,IAAI,CAACO,KAAK,CAAC,CAAC;EACZN,QAAQ,CAACI,IAAI,CAACG,WAAW,CAACR,IAAI,CAAC;;EAE/B;EACAF,GAAG,CAACW,eAAe,CAACZ,GAAG,CAAC;AAC1B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}